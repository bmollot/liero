#---------------------------------------------------------------------------------
.SUFFIXES:
#---------------------------------------------------------------------------------

ifeq ($(strip $(DEVKITPRO)),)
$(error "Please set DEVKITPRO in your environment. export DEVKITPRO=<path to>/devkitpro")
endif

PORTLIBS := $(DEVKITPRO)/portlibs/switch

TOPDIR ?= $(CURDIR)
include $(DEVKITPRO)/libnx/switch_rules

#---------------------------------------------------------------------------------
# TARGET is the name of the output
# BUILD is the directory where object files & intermediate files will be placed
# SOURCES is a list of directories containing source code
# DATA is a list of directories containing data files
# INCLUDES is a list of directories containing header files
# EXEFS_SRC is the optional input directory containing data copied into exefs, if anything this normally should only contain "main.npdm".
#
# NO_ICON: if set to anything, do not use icon.
# NO_NACP: if set to anything, no .nacp file is generated.
# APP_TITLE is the name of the app stored in the .nacp file (Optional)
# APP_AUTHOR is the author of the app stored in the .nacp file (Optional)
# APP_VERSION is the version of the app stored in the .nacp file (Optional)
# APP_TITLEID is the titleID of the app stored in the .nacp file (Optional)
# ICON is the filename of the icon (.jpg), relative to the project folder.
#   If not set, it attempts to use one of the following (in this order):
#     - <Project name>.jpg
#     - icon.jpg
#     - <libnx folder>/default_icon.jpg
#---------------------------------------------------------------------------------
ifeq ($(strip $(TOOL)),)
	TARGET		:=	openliero
else
	TARGET		:= liero-tool
endif
BUILD		:=	nx-build
SOURCES		:=	src
DATA		:=	data
INCLUDES	:=	src
EXEFS_SRC	:=	exefs_src
ROMFS := pkg

APP_TITLE	:= OpenLiero
APP_AUTHOR	:= OpenLiero Team
APP_ICON		:= $(DEVKITPRO)/libnx/default_icon.jpg

ifneq ($(ROMFS),)
	export NROFLAGS += --romfsdir=$(TOPDIR)/$(ROMFS)
endif

#---------------------------------------------------------------------------------
# options for code generation
#---------------------------------------------------------------------------------
DEFINES += -DSWITCH -D__AARCH64__ -DNO_EXCEPTIONS -DJOYPAD_CONTROLS # -DNXLINK # -DDEBUG_FILE=\"debug.txt\"

ARCH	:=	-march=armv8-a -mtune=cortex-a57 -mtp=soft -fPIE

CFLAGS	:= -g -Wall -O2 -ffunction-sections \
			$(ARCH) $(DEFINES)

CFLAGS	+= $(INCLUDE)	-I$(PORTLIBS)/include/SDL2

CXXFLAGS	:= $(CFLAGS) -fno-exceptions -std=gnu++11

ASFLAGS	:=	-g $(ARCH)
LDFLAGS	=	-specs=$(DEVKITPRO)/libnx/switch.specs -g $(ARCH) -Wl,-Map,$(notdir $*.map)

LIBS	:=  -lSDL2_image -lSDL2 -ljpeg -lpng16 -lz -lnx -lc -lm

#---------------------------------------------------------------------------------
# list of directories containing libraries, this must be the top level containing
# include and lib
#---------------------------------------------------------------------------------
LIBDIRS	:= $(PORTLIBS) $(LIBNX)


#---------------------------------------------------------------------------------
# no real need to edit anything past this point unless you need to add additional
# rules for different file extensions
#---------------------------------------------------------------------------------
ifneq ($(BUILD),$(notdir $(CURDIR)))
#---------------------------------------------------------------------------------

export OUTPUT	:=	$(CURDIR)/$(TARGET)
export TOPDIR	:=	$(CURDIR)

export VPATH	:=	$(foreach dir,$(SOURCES),$(CURDIR)/$(dir)) \
			$(foreach dir,$(DATA),$(CURDIR)/$(dir))

export DEPSDIR	:=	$(CURDIR)/$(BUILD)

CORE_SOURCES := \
		game/bobject.cpp \
    game/bonus.cpp \
    game/common.cpp \
    game/console.cpp \
    game/constants.cpp \
    game/filesystem.cpp \
    game/game.cpp \
    game/level.cpp \
    game/math.cpp \
    game/ninjarope.cpp \
    game/nobject.cpp \
    game/rand.cpp \
    game/settings.cpp \
    game/sobject.cpp \
    game/spectatorviewport.cpp \
    game/stats_recorder.cpp \
    game/sys.cpp \
    game/text.cpp \
    game/viewport.cpp \
    game/weapon.cpp \
    game/worm.cpp \
    game/ai/dijkstra.cpp \
    game/ai/predictive_ai.cpp \
    game/gfx/blit.cpp \
    game/gfx/font.cpp \
    game/gfx/palette.cpp \
    game/gfx/renderer.cpp \
    game/gfx/sprite.cpp \
    game/mixer/mixer.c \
    game/mixer/player.cpp \
    gvl/zlib/miniz.c \
    gvl/system/system.c \
    gvl/support/bits.c \
    gvl/support/debug.cpp \
    gvl/support/platform.cpp \
    gvl/support/profile.cpp \
    gvl/io2/stream.cpp \
    gvl/io2/convert.cpp \
    gvl/containers/list.cpp

GAME_SOURCES := $(CORE_SOURCES) \
		game/sdlmain.cpp \
		game/gfx.cpp \
    game/keys.cpp \
    game/main.cpp \
    game/replay.cpp \
    game/sfx.cpp \
    game/weapsel.cpp \
    game/controller/commonController.cpp \
    game/controller/localController.cpp \
    game/controller/replayController.cpp \
    game/controller/stats_presenter.cpp \
    game/menu/booleanSwitchBehavior.cpp \
    game/menu/enumBehavior.cpp \
    game/menu/hiddenMenu.cpp \
    game/menu/integerBehavior.cpp \
    game/menu/itemBehavior.cpp \
    game/menu/mainMenu.cpp \
    game/menu/menu.cpp \
    game/menu/menuItem.cpp \
    game/menu/timeBehavior.cpp

TOOL_SOURCES := $(CORE_SOURCES) \
		tc_tool/common_exereader.cpp \
    tc_tool/common_writer.cpp \
    tc_tool/tc_tool_main.cpp

CFILES		:=	$(filter %.c,$(GAME_SOURCES))
CPPFILES	:=	$(filter %.cpp,$(GAME_SOURCES))
TOOL_CFILES		:=	$(filter %.c,$(TOOL_SOURCES))
TOOL_CPPFILES	:=	$(filter %.cpp,$(TOOL_SOURCES))
# SFILES		:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.s)))
# BINFILES	:=	$(foreach dir,$(DATA),$(notdir $(wildcard $(dir)/*.*)))

#---------------------------------------------------------------------------------
# use CXX for linking C++ projects, CC for standard C
#---------------------------------------------------------------------------------
ifeq ($(strip $(CPPFILES)),)
#---------------------------------------------------------------------------------
	export LD	:=	$(CC)
#---------------------------------------------------------------------------------
else
#---------------------------------------------------------------------------------
	export LD	:=	$(CXX)
#---------------------------------------------------------------------------------
endif
#---------------------------------------------------------------------------------

ifeq ($(strip $(TOOL)),)
	export OFILES	:=	$(CPPFILES:.cpp=.o) $(CFILES:.c=.o)
else
	export OFILES := $(TOOL_CPPFILES:.cpp=.o) $(TOOL_CFILES:.c=.o)
endif

export INCLUDE	:=	$(foreach dir,$(INCLUDES),-I$(CURDIR)/$(dir)) \
			$(foreach dir,$(LIBDIRS),-I$(dir)/include) \
			-I$(CURDIR)/$(BUILD)

export LIBPATHS	:=	$(foreach dir,$(LIBDIRS),-L$(dir)/lib)

export BUILD_EXEFS_SRC := $(TOPDIR)/$(EXEFS_SRC)

ifeq ($(strip $(ICON)),)
	icons := $(wildcard *.jpg)
	ifneq (,$(findstring $(TARGET).jpg,$(icons)))
		export APP_ICON := $(TOPDIR)/$(TARGET).jpg
	else
		ifneq (,$(findstring icon.jpg,$(icons)))
			export APP_ICON := $(TOPDIR)/icon.jpg
		endif
	endif
else
	export APP_ICON := $(TOPDIR)/$(ICON)
endif

ifeq ($(strip $(NO_ICON)),)
	export NROFLAGS += --icon=$(APP_ICON)
endif

ifeq ($(strip $(NO_NACP)),)
	export NROFLAGS += --nacp=$(CURDIR)/$(TARGET).nacp
endif

ifneq ($(APP_TITLEID),)
	export NACPFLAGS += --titleid=$(APP_TITLEID)
endif

.PHONY: $(BUILD) clean all build-dirs print-%

print-% : ; $(info $* is a $(flavor $*) variable set to [$($*)]) @true

BUILD_DIRS := $(addprefix $(BUILD)/,$(dir $(GAME_SOURCES)))

build-dirs:
	@mkdir -p $(BUILD_DIRS)

#---------------------------------------------------------------------------------
all: $(BUILD)

$(BUILD): build-dirs
	@[ -d $@ ] || mkdir -p $@
	@$(MAKE) --no-print-directory -C $(BUILD) -f $(CURDIR)/Makefile.nx

#---------------------------------------------------------------------------------
clean:
	@echo clean ...
	@rm -fr $(BUILD) $(TARGET).pfs0 $(TARGET).nso $(TARGET).nro $(TARGET).nacp $(TARGET).elf


#---------------------------------------------------------------------------------
else
.PHONY:	all

DEPENDS	:=	$(OFILES:.o=.d)

#---------------------------------------------------------------------------------
# main targets
#---------------------------------------------------------------------------------
all	:	$(OUTPUT).pfs0 $(OUTPUT).nro

$(OUTPUT).pfs0	:	$(OUTPUT).nso

$(OUTPUT).nso	:	$(OUTPUT).elf

ifeq ($(strip $(NO_NACP)),)
$(OUTPUT).nro	:	$(OUTPUT).elf $(OUTPUT).nacp
else
$(OUTPUT).nro	:	$(OUTPUT).elf
endif

$(OUTPUT).elf	:	$(OFILES)



#---------------------------------------------------------------------------------
# you need a rule like this for each extension you use as binary data
#---------------------------------------------------------------------------------
%.png.o	:	%.png
#---------------------------------------------------------------------------------
	@echo $(notdir $<)
	@$(bin2o)

-include $(DEPENDS)

#---------------------------------------------------------------------------------------
endif
#---------------------------------------------------------------------------------------